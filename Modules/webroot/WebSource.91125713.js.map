{"mappings":"ACAA,IAAI,WAAa,EAEjB,SAAS,eAAe,CAAO,CAAE,EAAU,CAAC,CAAC,EACzC,OAAO,IAAI,QAAQ,CAAC,EAAS,KACzB,IAAM,EAAW,CAAC,cAAc,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,aAAA,CAAc,CAE9D,SAAS,EAAQ,CAAI,EACjB,OAAO,MAAM,CAAC,EAAK,AACvB,CAEA,MAAM,CAAC,EAAS,CAAG,CAAC,EAAO,EAAQ,KAC/B,EAAQ,CAAE,MAAA,EAAO,OAAA,EAAQ,OAAA,CAAO,GAChC,EAAQ,EACZ,EAEA,GAAI,CACA,IAAI,IAAI,CAAC,EAAS,KAAK,SAAS,CAAC,GAAU,EAC/C,CAAE,MAAO,EAAO,CACZ,EAAO,GACP,EAAQ,EACZ,CACJ,EACJ,CAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAiB,SAAS,cAAc,CAAC,kBACzC,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAS,SAAS,cAAc,CAAC,qBACjC,EAAqB,SAAS,cAAc,CAAC,sBAGnD,EAAO,gBAAgB,CAAC,QAAS,KAC7B,EAAmB,WAAW,CAAG,EAAO,KAAK,AACjD,GAEA,EAAe,gBAAgB,CAAC,QAAS,UACrC,GAAI,CACA,IAAM,EAAc,EAAO,KAAK,CAI1B,EAAc,CAAC,yCAAyC,EAAE,EAAY,wDAAwD,CAAC,CAE/H,EAAa,MAAM,eAAe,GAExC,GAAI,AAAqB,IAArB,EAAW,KAAK,CAAQ,CACxB,QAAQ,KAAK,CAAC,0BAA2B,EAAW,MAAM,EAC1D,IAAI,KAAK,CAAC,yBAA2B,EAAW,MAAM,EACtD,MACJ,CAEA,QAAQ,GAAG,CAAC,8CACZ,IAAI,KAAK,CAAC,kBAGV,IAAM,EAAc,MAAM,eAAe,0DAErC,AAAsB,CAAA,IAAtB,EAAY,KAAK,EACjB,QAAQ,GAAG,CAAC,6BAA8B,GAC1C,IAAI,KAAK,CAAC,CAAC,2BAA2B,EAAE,EAAA,CAAa,IAErD,QAAQ,KAAK,CAAC,wBAAyB,EAAY,MAAM,EACzD,IAAI,KAAK,CAAC,4BAA8B,EAAY,MAAM,EAElE,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,SAAU,GACxB,IAAI,KAAK,CAAC,UAAY,EAAM,OAAO,CACvC,CACJ,GAEA,EAAgB,gBAAgB,CAAC,QAAS,UACtC,GAAI,CACA,GAAM,CAAE,MAAA,CAAK,CAAE,OAAA,CAAM,CAAE,OAAA,CAAM,CAAE,CAAG,MAAM,eAAe,2DACnD,AAAU,CAAA,IAAV,GACA,QAAQ,GAAG,CAAC,mBAAoB,GAChC,IAAI,KAAK,CAAC,mCAEV,QAAQ,KAAK,CAAC,yBAA0B,GACxC,IAAI,KAAK,CAAC,6BAA+B,GAEjD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,SAAU,GACxB,IAAI,KAAK,CAAC,UAAY,EAAM,OAAO,CACvC,CACJ,EACJ","sources":["<anon>","ayunda.js"],"sourcesContent":["let callbackId = 0;\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve, reject)=>{\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        function cleanup(name) {\n            delete window[name];\n        }\n        window[callback] = (errno, stdout, stderr)=>{\n            resolve({\n                errno,\n                stdout,\n                stderr\n            });\n            cleanup(callback);\n        };\n        try {\n            ksu.exec(command, JSON.stringify(options), callback);\n        } catch (error) {\n            reject(error);\n            cleanup(callback);\n        }\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n    // Update display when slider value changes\n    slider.addEventListener(\"input\", ()=>{\n        sliderValueDisplay.textContent = slider.value;\n    });\n    moduleOnButton.addEventListener(\"click\", async ()=>{\n        try {\n            const sliderValue = slider.value;\n            // Step 1: Create a command to overwrite ModuleOn.sh with the new value.\n            // Note the use of single quotes to prevent shell expansion issues.\n            const saveCommand = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n            const saveResult = await executeCommand(saveCommand);\n            if (saveResult.errno !== 0) {\n                console.error(\"Failed to save setting:\", saveResult.stderr);\n                ksu.toast(\"Error saving setting: \" + saveResult.stderr);\n                return; // Stop if we can't save the file\n            }\n            console.log(\"Setting saved to ModuleOn.sh successfully!\");\n            ksu.toast(\"Setting saved!\");\n            // Step 2: Execute the script to apply the new setting immediately.\n            const applyResult = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh\");\n            if (applyResult.errno === 0) {\n                console.log(\"Module enabled with value:\", sliderValue);\n                ksu.toast(`Module enabled with value: ${sliderValue}`);\n            } else {\n                console.error(\"Module enable failed:\", applyResult.stderr);\n                ksu.toast(\"Failed to apply setting: \" + applyResult.stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n    moduleOffButton.addEventListener(\"click\", async ()=>{\n        try {\n            const { errno, stdout, stderr } = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n            if (errno === 0) {\n                console.log(\"Module disabled:\", stdout);\n                ksu.toast(\"Module disabled successfully!\");\n            } else {\n                console.error(\"Module disable failed:\", stderr);\n                ksu.toast(\"Failed to disable module: \" + stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n});\n\n//# sourceMappingURL=WebSource.91125713.js.map\n","let callbackId = 0;\n\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        \n        function cleanup(name) {\n            delete window[name];\n        }\n        \n        window[callback] = (errno, stdout, stderr) => {\n            resolve({ errno, stdout, stderr });\n            cleanup(callback);\n        };\n        \n        try {\n            ksu.exec(command, JSON.stringify(options), callback);\n        } catch (error) {\n            reject(error);\n            cleanup(callback);\n        }\n    });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n\n    // Update display when slider value changes\n    slider.addEventListener(\"input\", () => {\n        sliderValueDisplay.textContent = slider.value;\n    });\n\n    moduleOnButton.addEventListener(\"click\", async () => {\n        try {\n            const sliderValue = slider.value;\n            \n            // Step 1: Create a command to overwrite ModuleOn.sh with the new value.\n            // Note the use of single quotes to prevent shell expansion issues.\n            const saveCommand = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n\n            const saveResult = await executeCommand(saveCommand);\n\n            if (saveResult.errno !== 0) {\n                console.error(\"Failed to save setting:\", saveResult.stderr);\n                ksu.toast(\"Error saving setting: \" + saveResult.stderr);\n                return; // Stop if we can't save the file\n            }\n\n            console.log(\"Setting saved to ModuleOn.sh successfully!\");\n            ksu.toast(\"Setting saved!\");\n\n            // Step 2: Execute the script to apply the new setting immediately.\n            const applyResult = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh\");\n            \n            if (applyResult.errno === 0) {\n                console.log(\"Module enabled with value:\", sliderValue);\n                ksu.toast(`Module enabled with value: ${sliderValue}`);\n            } else {\n                console.error(\"Module enable failed:\", applyResult.stderr);\n                ksu.toast(\"Failed to apply setting: \" + applyResult.stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n\n    moduleOffButton.addEventListener(\"click\", async () => {\n        try {\n            const { errno, stdout, stderr } = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n            if (errno === 0) {\n                console.log(\"Module disabled:\", stdout);\n                ksu.toast(\"Module disabled successfully!\");\n            } else {\n                console.error(\"Module disable failed:\", stderr);\n                ksu.toast(\"Failed to disable module: \" + stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n});"],"names":["callbackId","executeCommand","command","options","Promise","resolve","reject","callback","Date","now","cleanup","name","window","errno","stdout","stderr","ksu","exec","JSON","stringify","error","document","addEventListener","moduleOnButton","getElementById","moduleOffButton","slider","sliderValueDisplay","textContent","value","sliderValue","saveCommand","saveResult","console","toast","log","applyResult","message"],"version":3,"file":"WebSource.91125713.js.map"}