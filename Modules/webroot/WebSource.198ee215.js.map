{"mappings":"ACAA,IAAI,WAAa,EAEjB,SAAS,eAAe,CAAO,CAAE,EAAU,CAAC,CAAC,EACzC,OAAO,IAAI,QAAQ,CAAC,EAAS,KACzB,IAAM,EAAW,CAAC,cAAc,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,aAAA,CAAc,CAE9D,SAAS,EAAQ,CAAI,EACjB,OAAO,MAAM,CAAC,EAAK,AACvB,CAEA,MAAM,CAAC,EAAS,CAAG,CAAC,EAAO,EAAQ,KAC/B,EAAQ,CAAE,MAAA,EAAO,OAAA,EAAQ,OAAA,CAAO,GAChC,EAAQ,EACZ,EAEA,GAAI,CACA,IAAI,IAAI,CAAC,EAAS,KAAK,SAAS,CAAC,GAAU,EAC/C,CAAE,MAAO,EAAO,CACZ,EAAO,GACP,EAAQ,EACZ,CACJ,EACJ,CAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAiB,SAAS,cAAc,CAAC,kBACzC,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAS,SAAS,cAAc,CAAC,qBACjC,EAAqB,SAAS,cAAc,CAAC,sBAE7C,EAAe,UACjB,GAAI,CACA,IAAM,EAAc,EAAO,KAAK,CAE1B,EAAU,CAAC,yCAAyC,EAAE,EAAY,mHAAmH,CAAC,CACtL,EAAS,MAAM,eAAe,EAEhC,AAAiB,CAAA,IAAjB,EAAO,KAAK,CACZ,QAAQ,GAAG,CAAC,8BAA+B,IAE3C,QAAQ,KAAK,CAAC,2BAA4B,EAAO,MAAM,EACvD,IAAI,KAAK,CAAC,4BAA8B,EAAO,MAAM,EAE7D,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,SAAU,GACxB,IAAI,KAAK,CAAC,UAAY,EAAM,OAAO,CACvC,CACJ,EAGA,EAAO,gBAAgB,CAAC,QAAS,KAC7B,EAAmB,WAAW,CAAG,EAAO,KAAK,AACjD,GAGA,EAAO,gBAAgB,CAAC,SAAU,GAGlC,EAAe,gBAAgB,CAAC,QAAS,GAEzC,EAAgB,gBAAgB,CAAC,QAAS,UACtC,GAAI,CACA,GAAM,CAAE,MAAA,CAAK,CAAE,OAAA,CAAM,CAAE,OAAA,CAAM,CAAE,CAAG,MAAM,eAAe,2DACnD,AAAU,CAAA,IAAV,GACA,QAAQ,GAAG,CAAC,mBAAoB,GAChC,IAAI,KAAK,CAAC,mCAEV,QAAQ,KAAK,CAAC,yBAA0B,GACxC,IAAI,KAAK,CAAC,6BAA+B,GAEjD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,SAAU,GACxB,IAAI,KAAK,CAAC,UAAY,EAAM,OAAO,CACvC,CACJ,EACJ","sources":["<anon>","ayunda.js"],"sourcesContent":["let callbackId = 0;\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve, reject)=>{\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        function cleanup(name) {\n            delete window[name];\n        }\n        window[callback] = (errno, stdout, stderr)=>{\n            resolve({\n                errno,\n                stdout,\n                stderr\n            });\n            cleanup(callback);\n        };\n        try {\n            ksu.exec(command, JSON.stringify(options), callback);\n        } catch (error) {\n            reject(error);\n            cleanup(callback);\n        }\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n    const applySetting = async ()=>{\n        try {\n            const sliderValue = slider.value;\n            // Single command to save the new value AND then execute the script.\n            const command = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh && sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n            const result = await executeCommand(command);\n            if (result.errno === 0) console.log(\"Setting applied with value:\", sliderValue);\n            else {\n                console.error(\"Failed to apply setting:\", result.stderr);\n                ksu.toast(\"Failed to apply setting: \" + result.stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    };\n    // Updates the text display in real-time as you drag.\n    slider.addEventListener(\"input\", ()=>{\n        sliderValueDisplay.textContent = slider.value;\n    });\n    // Executes the command only when you release the slider.\n    slider.addEventListener(\"change\", applySetting);\n    // The button still works to apply the current setting.\n    moduleOnButton.addEventListener(\"click\", applySetting);\n    moduleOffButton.addEventListener(\"click\", async ()=>{\n        try {\n            const { errno, stdout, stderr } = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n            if (errno === 0) {\n                console.log(\"Module disabled:\", stdout);\n                ksu.toast(\"Module disabled successfully!\");\n            } else {\n                console.error(\"Module disable failed:\", stderr);\n                ksu.toast(\"Failed to disable module: \" + stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n});\n\n//# sourceMappingURL=WebSource.198ee215.js.map\n","let callbackId = 0;\n\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        \n        function cleanup(name) {\n            delete window[name];\n        }\n        \n        window[callback] = (errno, stdout, stderr) => {\n            resolve({ errno, stdout, stderr });\n            cleanup(callback);\n        };\n        \n        try {\n            ksu.exec(command, JSON.stringify(options), callback);\n        } catch (error) {\n            reject(error);\n            cleanup(callback);\n        }\n    });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n\n    const applySetting = async () => {\n        try {\n            const sliderValue = slider.value;\n            // Single command to save the new value AND then execute the script.\n            const command = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh && sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n            const result = await executeCommand(command);\n\n            if (result.errno === 0) {\n                console.log(\"Setting applied with value:\", sliderValue);\n            } else {\n                console.error(\"Failed to apply setting:\", result.stderr);\n                ksu.toast(\"Failed to apply setting: \" + result.stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    };\n\n    // Updates the text display in real-time as you drag.\n    slider.addEventListener(\"input\", () => {\n        sliderValueDisplay.textContent = slider.value;\n    });\n\n    // Executes the command only when you release the slider.\n    slider.addEventListener(\"change\", applySetting);\n\n    // The button still works to apply the current setting.\n    moduleOnButton.addEventListener(\"click\", applySetting);\n\n    moduleOffButton.addEventListener(\"click\", async () => {\n        try {\n            const { errno, stdout, stderr } = await executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n            if (errno === 0) {\n                console.log(\"Module disabled:\", stdout);\n                ksu.toast(\"Module disabled successfully!\");\n            } else {\n                console.error(\"Module disable failed:\", stderr);\n                ksu.toast(\"Failed to disable module: \" + stderr);\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            ksu.toast(\"Error: \" + error.message);\n        }\n    });\n});"],"names":["callbackId","executeCommand","command","options","Promise","resolve","reject","callback","Date","now","cleanup","name","window","errno","stdout","stderr","ksu","exec","JSON","stringify","error","document","addEventListener","moduleOnButton","getElementById","moduleOffButton","slider","sliderValueDisplay","applySetting","sliderValue","value","result","console","log","toast","message","textContent"],"version":3,"file":"WebSource.198ee215.js.map"}