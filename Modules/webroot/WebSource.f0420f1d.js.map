{"mappings":"ACAA,IAAI,WAAa,EAEjB,SAAS,eAAe,CAAO,CAAE,EAAU,CAAC,CAAC,EACzC,OAAO,IAAI,QAAQ,AAAC,IAChB,IAAM,EAAW,CAAC,cAAc,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,aAAA,CAAc,AAE9D,CAAA,MAAM,CAAC,EAAS,CAAG,CAAC,EAAO,EAAQ,KAC/B,EAAQ,CAAE,MAAA,EAAO,OAAA,EAAQ,OAAA,CAAO,GAChC,OAAO,MAAM,CAAC,EAAS,AAC3B,EAEA,IAAI,IAAI,CAAC,EAAS,KAAK,SAAS,CAAC,GAAU,EAC/C,EACJ,CAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAiB,SAAS,cAAc,CAAC,kBACzC,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAS,SAAS,cAAc,CAAC,qBACjC,EAAqB,SAAS,cAAc,CAAC,sBAoB7C,EAAe,UAEjB,IAAM,EAAc,WAAW,EAAO,KAAK,EAAE,OAAO,CAAC,GAC/C,EAAU,CAAC,yCAAyC,EAAE,EAAY,mHAAmH,CAAC,AAC5L,OAAM,eAAe,EACzB,EAKA,AAzByB,CAAA,UAGrB,IAAM,EAAQ,WAAW,AADV,CAAA,MAAM,eADL,yEAChB,EACgC,MAAM,CAAC,IAAI,GAG3C,CAAA,EAAO,KAAK,CAAG,EAGf,EAAmB,WAAW,CAAG,EAAM,OAAO,CAAC,GAAG,OAAO,CAAC,IAAK,IACnE,CAAA,IAkBA,EAAO,gBAAgB,CAAC,QAAS,KAE7B,EAAmB,WAAW,CADT,WAAW,EAAO,KAAK,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,IAAK,IAE1E,GAGA,EAAO,gBAAgB,CAAC,SAAU,GAGlC,EAAe,gBAAgB,CAAC,QAAS,GAGzC,EAAgB,gBAAgB,CAAC,QAAS,KACtC,eAAe,2DACnB,EACJ","sources":["<anon>","ayunda.js"],"sourcesContent":["let callbackId = 0;\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve)=>{\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        window[callback] = (errno, stdout, stderr)=>{\n            resolve({\n                errno,\n                stdout,\n                stderr\n            });\n            delete window[callback];\n        };\n        ksu.exec(command, JSON.stringify(options), callback);\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n    /**\n     * Reads the current value from ModuleOn.sh and updates the UI.\n     */ const loadInitialValue = async ()=>{\n        const command = \"awk '{print $NF}' /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh\";\n        const result = await executeCommand(command);\n        const value = parseFloat(result.stdout.trim());\n        // Set the slider's internal value (this requires a standard number with a dot)\n        slider.value = value;\n        // Set the visual display text, replacing the dot with a comma\n        sliderValueDisplay.textContent = value.toFixed(1).replace('.', ',');\n    };\n    /**\n     * Applies the current slider value to the system and saves it.\n     */ const applySetting = async ()=>{\n        // The value written to the shell script MUST use a period, not a comma.\n        const sliderValue = parseFloat(slider.value).toFixed(1);\n        const command = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh && sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n        await executeCommand(command);\n    };\n    // --- Event Listeners ---\n    // 1. Load the saved value when the page is ready.\n    loadInitialValue();\n    // 2. Update the display in real-time as the user drags the slider.\n    slider.addEventListener(\"input\", ()=>{\n        const displayValue = parseFloat(slider.value).toFixed(1).replace('.', ',');\n        sliderValueDisplay.textContent = displayValue;\n    });\n    // 3. Apply the setting when the user releases the slider.\n    slider.addEventListener(\"change\", applySetting);\n    // 4. Also apply the setting when the \"Module On\" button is clicked.\n    moduleOnButton.addEventListener(\"click\", applySetting);\n    // 5. Handle the \"Module Off\" button.\n    moduleOffButton.addEventListener(\"click\", ()=>{\n        executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n    });\n});\n\n//# sourceMappingURL=WebSource.f0420f1d.js.map\n","let callbackId = 0;\n\nfunction executeCommand(command, options = {}) {\n    return new Promise((resolve) => {\n        const callback = `exec_callback_${Date.now()}_${callbackId++}`;\n        \n        window[callback] = (errno, stdout, stderr) => {\n            resolve({ errno, stdout, stderr });\n            delete window[callback];\n        };\n        \n        ksu.exec(command, JSON.stringify(options), callback);\n    });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const moduleOnButton = document.getElementById(\"moduleOnButton\");\n    const moduleOffButton = document.getElementById(\"moduleOffButton\");\n    const slider = document.getElementById(\"moduleValueSlider\");\n    const sliderValueDisplay = document.getElementById(\"sliderValueDisplay\");\n\n    /**\n     * Reads the current value from ModuleOn.sh and updates the UI.\n     */\n    const loadInitialValue = async () => {\n        const command = \"awk '{print $NF}' /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh\";\n        const result = await executeCommand(command);\n        const value = parseFloat(result.stdout.trim());\n        \n        // Set the slider's internal value (this requires a standard number with a dot)\n        slider.value = value;\n        \n        // Set the visual display text, replacing the dot with a comma\n        sliderValueDisplay.textContent = value.toFixed(1).replace('.', ',');\n    };\n\n    /**\n     * Applies the current slider value to the system and saves it.\n     */\n    const applySetting = async () => {\n        // The value written to the shell script MUST use a period, not a comma.\n        const sliderValue = parseFloat(slider.value).toFixed(1); \n        const command = `echo 'service call SurfaceFlinger 1022 f ${sliderValue}' > /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh && sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOn.sh`;\n        await executeCommand(command);\n    };\n\n    // --- Event Listeners ---\n\n    // 1. Load the saved value when the page is ready.\n    loadInitialValue();\n\n    // 2. Update the display in real-time as the user drags the slider.\n    slider.addEventListener(\"input\", () => {\n        const displayValue = parseFloat(slider.value).toFixed(1).replace('.', ',');\n        sliderValueDisplay.textContent = displayValue;\n    });\n\n    // 3. Apply the setting when the user releases the slider.\n    slider.addEventListener(\"change\", applySetting);\n\n    // 4. Also apply the setting when the \"Module On\" button is clicked.\n    moduleOnButton.addEventListener(\"click\", applySetting);\n\n    // 5. Handle the \"Module Off\" button.\n    moduleOffButton.addEventListener(\"click\", () => {\n        executeCommand(\"sh /data/adb/modules/AyundaRusdi/AyundaRisu/ModuleOff.sh\");\n    });\n});"],"names":["callbackId","executeCommand","command","options","Promise","resolve","callback","Date","now","window","errno","stdout","stderr","ksu","exec","JSON","stringify","document","addEventListener","moduleOnButton","getElementById","moduleOffButton","slider","sliderValueDisplay","applySetting","sliderValue","parseFloat","value","toFixed","loadInitialValue","result","trim","textContent","replace"],"version":3,"file":"WebSource.f0420f1d.js.map"}